extern crate color;

use color::*;

const EPS: f32 = 1e-5;

#[test]
fn test_hsv() {
    fn check((h, s, v): (f32, f32, f32), (r, g, b): (f32, f32, f32)) {
        let color_hsv = Color::hsv(h, s, v);
        let color_rgb = Color::rgb(r, g, b);
        let distance = color_hsv.distance_to(color_rgb);
        assert!(distance < EPS);
    }

    // Random generated test cases
    check(
        (0.58, 0.41, 0.56),
        (0.3304000000000001, 0.44979200000000014, 0.56),
    );
    check(
        (0.01, 0.85, 0.03),
        (0.03, 0.0060300000000000015, 0.0045000000000000005),
    );
    check((0.94, 0.52, 0.33), (0.33, 0.1584, 0.2201760000000001));
    check((0.12, 0.78, 0.32), (0.32, 0.250112, 0.07039999999999999));
    check((0.12, 0.8, 1.0), (1.0, 0.776, 0.19999999999999996));
    check((0.38, 0.46, 1.0), (0.54, 1.0, 0.6688000000000001));
    check(
        (0.28, 0.61, 0.43),
        (0.25163599999999997, 0.43, 0.16770000000000002),
    );
    check((1.0, 0.87, 0.86), (0.86, 0.1118, 0.1118));
    check(
        (0.63, 0.67, 0.2),
        (0.06599999999999999, 0.09547999999999997, 0.2),
    );
    check(
        (0.72, 0.63, 0.23),
        (0.13146800000000003, 0.08510000000000001, 0.23),
    );
    check(
        (0.57, 0.76, 0.18),
        (0.043199999999999995, 0.12254400000000001, 0.18),
    );
    check((0.61, 0.38, 0.66), (0.4092, 0.4944719999999999, 0.66));
    check((0.26, 0.93, 0.56), (0.268352, 0.56, 0.03919999999999998));
    check((0.88, 0.64, 0.0), (0.0, 0.0, 0.0));
    check((0.12, 0.67, 0.38), (0.38, 0.308712, 0.12539999999999998));
    check((0.69, 0.06, 0.54), (0.512136, 0.5076, 0.54));
    check((0.53, 0.34, 0.17), (0.1122, 0.15959600000000002, 0.17));
    check(
        (1.0, 0.82, 0.57),
        (0.57, 0.10260000000000002, 0.10260000000000002),
    );
    check(
        (0.66, 0.79, 0.2),
        (0.041999999999999996, 0.04832000000000001, 0.2),
    );
    check(
        (0.96, 0.61, 0.08),
        (0.08, 0.031200000000000002, 0.04291200000000002),
    );
    check((0.65, 0.24, 0.39), (0.2964, 0.30576, 0.39));
    check((0.89, 0.14, 0.36), (0.36, 0.3096, 0.342864));
    check((0.97, 0.62, 0.02), (0.02, 0.0076, 0.009831999999999997));
    check((0.05, 0.1, 0.24), (0.24, 0.2232, 0.216));
    check((0.53, 0.52, 0.32), (0.1536, 0.290048, 0.32));
    check((0.07, 0.09, 0.76), (0.76, 0.720328, 0.6916));
    check(
        (0.76, 0.89, 0.98),
        (0.5962320000000004, 0.10779999999999998, 0.98),
    );
    check(
        (0.48, 0.91, 0.71),
        (0.06389999999999997, 0.71, 0.6324679999999999),
    );
    check(
        (0.85, 0.97, 0.1),
        (0.1, 0.0030000000000000027, 0.09030000000000005),
    );
    check((0.33, 0.74, 0.17), (0.04671600000000001, 0.17, 0.0442));
    check((0.96, 0.13, 0.91), (0.91, 0.7917000000000001, 0.820092));
    check((0.02, 0.56, 0.1), (0.1, 0.05071999999999999, 0.044));
    check((0.24, 0.04, 0.4), (0.39296000000000003, 0.4, 0.384));
    check((0.32, 0.51, 0.1), (0.05308000000000001, 0.1, 0.049));
    check((0.66, 0.22, 0.93), (0.7254, 0.733584, 0.93));
    check((0.27, 0.15, 0.86), (0.78002, 0.86, 0.731));
    check((0.03, 0.89, 0.51), (0.51, 0.13780199999999995, 0.0561));
    check((0.91, 0.29, 0.4), (0.4, 0.284, 0.34664000000000006));
    check(
        (0.69, 0.48, 0.1),
        (0.058719999999999994, 0.052000000000000005, 0.1),
    );
    check((0.11, 0.17, 0.88), (0.88, 0.829136, 0.7303999999999999));
    check((0.65, 1.0, 0.07), (0.0, 0.006999999999999976, 0.07));
    check(
        (0.97, 0.67, 0.82),
        (0.82, 0.27059999999999995, 0.3694919999999998),
    );
    check(
        (1.0, 0.59, 0.92),
        (0.92, 0.37720000000000004, 0.37720000000000004),
    );
    check((0.45, 0.39, 0.82), (0.5002, 0.82, 0.7240599999999999));
    check(
        (0.04, 0.86, 0.54),
        (0.54, 0.18705600000000003, 0.07560000000000001),
    );
    check((0.4, 0.32, 0.93), (0.6324, 0.93, 0.7514400000000001));
    check((0.06, 0.51, 0.1), (0.1, 0.06736, 0.049));
    check(
        (0.93, 0.94, 0.24),
        (0.24, 0.014400000000000012, 0.10915199999999999),
    );
    check(
        (0.88, 0.71, 0.05),
        (0.05, 0.014500000000000002, 0.04005999999999999),
    );
    check((0.72, 0.4, 0.89), (0.64792, 0.534, 0.89));
    check((0.09, 0.78, 0.27), (0.27, 0.173124, 0.059399999999999994));
    check(
        (0.35, 0.65, 0.4),
        (0.13999999999999999, 0.4, 0.1659999999999999),
    );
    check(
        (0.45, 0.65, 0.19),
        (0.06649999999999999, 0.19, 0.15295000000000003),
    );
    check(
        (0.67, 0.83, 0.43),
        (0.08023800000000018, 0.07310000000000001, 0.43),
    );
    check((0.18, 1.0, 0.37), (0.3404, 0.37, 0.0));
    check((0.2, 0.49, 0.37), (0.33374, 0.37, 0.1887));
    check((0.61, 0.12, 0.8), (0.7040000000000001, 0.73664, 0.8));
    check(
        (0.39, 0.17, 0.3),
        (0.24899999999999997, 0.3, 0.26633999999999997),
    );
    check((0.41, 0.74, 0.14), (0.0364, 0.14, 0.08405600000000002));
    check((0.78, 0.74, 0.49), (0.37396799999999986, 0.1274, 0.49));
    check((0.12, 0.13, 0.42), (0.42, 0.404712, 0.3654));
    check((0.83, 0.53, 0.5), (0.49469999999999986, 0.235, 0.5));
    check((0.72, 0.12, 0.89), (0.817376, 0.7832, 0.89));
    check((0.99, 0.06, 0.99), (0.99, 0.9306, 0.934164));
    check(
        (0.73, 0.55, 0.57),
        (0.3756299999999999, 0.25649999999999995, 0.57),
    );
    check((0.04, 0.24, 0.72), (0.72, 0.588672, 0.5472));
    check((0.96, 0.07, 0.29), (0.29, 0.26969999999999994, 0.274572));
    check((0.71, 0.07, 0.05), (0.04741, 0.0465, 0.05));
    check(
        (0.31, 0.69, 0.44),
        (0.1789040000000001, 0.44, 0.13640000000000002),
    );
    check((0.96, 0.16, 0.99), (0.99, 0.8316, 0.8696160000000001));
    check((0.82, 0.16, 0.29), (0.286288, 0.24359999999999998, 0.29));
    check((0.84, 0.5, 0.15), (0.15, 0.075, 0.147));
    check((0.26, 0.25, 0.6), (0.516, 0.6, 0.44999999999999996));
    check(
        (0.0, 0.97, 0.34),
        (0.34, 0.01020000000000001, 0.01020000000000001),
    );
    check(
        (0.96, 0.81, 0.46),
        (0.46, 0.08739999999999998, 0.1768240000000001),
    );
    check((0.09, 0.39, 0.32), (0.32, 0.262592, 0.1952));
    check((0.18, 0.28, 0.75), (0.7332000000000001, 0.75, 0.54));
    check(
        (0.3, 0.49, 0.53),
        (0.3222400000000001, 0.53, 0.27030000000000004),
    );
    check((0.32, 0.1, 0.43), (0.39044, 0.43, 0.387));
    check((0.8, 0.05, 0.45), (0.4455, 0.4275, 0.45));
    check(
        (0.42, 0.54, 0.91),
        (0.41859999999999997, 0.91, 0.6741280000000001),
    );
    check(
        (0.23, 0.66, 0.03),
        (0.022475999999999996, 0.03, 0.010199999999999999),
    );
    check(
        (0.39, 0.8, 0.21),
        (0.04199999999999999, 0.21, 0.09911999999999997),
    );
    check(
        (0.53, 0.78, 0.22),
        (0.04839999999999999, 0.18911199999999997, 0.22),
    );
    check((0.59, 0.16, 0.18), (0.1512, 0.16444799999999998, 0.18));
    check(
        (0.78, 0.7, 0.04),
        (0.03103999999999999, 0.012000000000000002, 0.04),
    );
    check((0.18, 0.03, 0.94), (0.937744, 0.94, 0.9117999999999999));
    check((0.12, 0.99, 0.51), (0.51, 0.368628, 0.005100000000000005));
    check(
        (0.65, 0.47, 0.05),
        (0.026500000000000003, 0.028849999999999994, 0.05),
    );
    check(
        (0.92, 0.65, 0.97),
        (0.97, 0.33949999999999997, 0.6421399999999997),
    );
    check(
        (0.8, 0.09, 0.45),
        (0.44190000000000007, 0.40950000000000003, 0.45),
    );
    check(
        (0.94, 0.7, 0.89),
        (0.89, 0.26700000000000007, 0.49128000000000027),
    );
    check(
        (0.56, 0.93, 1.0),
        (0.06999999999999995, 0.6651999999999997, 1.0),
    );
    check((0.71, 0.59, 0.03), (0.016901999999999997, 0.0123, 0.03));
    check((0.5, 0.98, 0.04), (0.0008000000000000007, 0.04, 0.04));
    check((0.2, 0.65, 0.9), (0.7829999999999999, 0.9, 0.315));
    check(
        (0.13, 0.53, 0.48),
        (0.48, 0.42403199999999996, 0.22559999999999997),
    );
    check((0.88, 0.69, 0.33), (0.33, 0.10230000000000002, 0.266244));
    check((0.59, 0.51, 0.46), (0.22540000000000002, 0.333316, 0.46));
    check((0.0, 0.05, 0.66), (0.66, 0.627, 0.627));
}
